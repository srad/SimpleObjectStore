@using SimpleObjectStore.Services.v1
@inject SimpleObjectStoreClient Client
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
<!--
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Administration</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>
-->

<div class="@NavMenuCssClass nav-scrollable p-2" @onclick="ToggleNavMenu">
    <button type="button" class="btn btn-primary p-2 mb-2 w-100" @onclick="AddBucket">
        <span style="cursor: pointer">
            <i class="bi bi-bucket-fill"></i>
            Add Bucket
        </span>
    </button>

    <div class="list-group">
        @if (Buckets != null)
        {
            @foreach (var bucket in Buckets)
            {
                <NavLink class="list-group-item list-group-item-action p-2" ActiveClass="bg-secondary-subtle" href="@($"bucket/{bucket.BucketId}")">
                    <div class="d-flex w-100 justify-content-between align-items-center">
                        <span>@bucket.Name</span>
                        <span class="badge bg-info rounded-pill d-flex align-items-center">@bucket.Size</span>
                    </div>
                </NavLink>
            }
        }
    </div>
</div>

@code {
    private bool CollapseNavMenu { get; set; } = true;
    private ICollection<Bucket>? Buckets { get; set; }
    private DriveInfo? DriveInfo { get; set; }

    private string? NavMenuCssClass => CollapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        Buckets = await Client.BucketsAllAsync();
    }

    private void ToggleNavMenu()
    {
        CollapseNavMenu = !CollapseNavMenu;
    }

    private async Task AddBucket()
    {
        try
        {
            var name = await JsRuntime.InvokeAsync<string>("prompt", "Bucket name?");
            if (string.IsNullOrWhiteSpace(name))
            {
                return;
            }

            var newBucket = await Client.BucketsPOSTAsync(name);
            Buckets?.Add(newBucket);
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

}