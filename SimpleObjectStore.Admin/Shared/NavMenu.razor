@using SimpleObjectStore.Services.v1
@inject SimpleObjectStoreClient Client
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
<!--
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Administration</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>
-->

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column px-3">
        <div class="nav-item">
            <NavLink class="nav-link bg-primary px-3" @onclick="AddBucket">
                Add Bucket
            </NavLink>
        </div>
        @if (Buckets != null)
        {
            @foreach (var bucket in Buckets)
            {
                <div class="nav-item">
                    <NavLink class="nav-link d-flex justify-content-between ps-2 pe-0" href="@($"bucket/{bucket.BucketId}")">
                        <span>@bucket.Name (@bucket.Size)</span>
                        <span class="oi oi-trash" onclick="@(() => DeleteAsync(bucket.BucketId, bucket.Name))"></span>
                    </NavLink>
                </div>
            }
        }
    </nav>
</div>

@code {
    private bool CollapseNavMenu { get; set; } = true;
    private ICollection<Bucket>? Buckets { get; set; }
    private DriveInfo? DriveInfo { get; set; }

    private string? NavMenuCssClass => CollapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        Buckets = await Client.BucketsAllAsync();
    }

    private void ToggleNavMenu()
    {
        CollapseNavMenu = !CollapseNavMenu;
    }

    private async Task AddBucket()
    {
        try
        {
            var name = await JsRuntime.InvokeAsync<string>("prompt", "Bucket name?");
            if (string.IsNullOrWhiteSpace(name))
            {
                return;
            }

            var newBucket = await Client.BucketsPOSTAsync(new CreateBucket()
            {
                Name = name
            });
            Buckets.Add(newBucket);
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }
    }

    private async Task DeleteAsync(string bucketId, string bucketName)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", $"Delete bucket '{bucketName}'?"))
        {
            await Client.BucketsDELETEAsync(bucketId);
            Buckets.Remove(Buckets.First(x => x.BucketId == bucketId));
            await InvokeAsync(StateHasChanged);
            NavigationManager.NavigateTo("/");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

}