@using SimpleObjectStore.Services.v1
@using SimpleObjectStore.Admin.Components
@using SimpleObjectStore.Admin.Extensions
@inherits LayoutComponentBase
@inject SimpleObjectStoreClient Client
@inject IJSRuntime JsRuntime

@attribute [Authorize(Roles = "objectstore")]

<PageTitle>Administration</PageTitle>

<nav class="navbar navbar-expand-lg bg-dark shadow-sm border-bottom border-light">
    <div class="container-fluid">
        <a class="navbar-brand text-white" href="#">SimpleObjectStore</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse d-flex justify-content-between" id="navbarSupportedContent">
            <div></div>
            <!--
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="#">Home</a>
                </li>
            </ul>
            -->
            <div class="d-flex align-items-center">
                @if (StorageInfo != null)
                {
                    <div class="d-flex justify-content-between">
                        <div class="text-white me-2">
                            <span>@StorageInfo.FreeGbFormatted()</span>&nbsp;&#47;
                            <span>@StorageInfo.SizeGbFormatted() GB</span>
                        </div>
                        <div class="progress d-flex me-2" style="height: 20px; width: 200px;" role="progressbar" aria-label="Default striped example" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100">
                            <div class="progress-bar progress-bar-striped" style="width: @StorageInfo.AvailablePercent.ToString("F").Replace(",", ".")%"></div>
                        </div>
                    </div>
                }
                <!--
                <form class="d-flex me-1" role="search">
                    <input class="form-control me-2" type="search" placeholder="Search bucket" aria-label="Search">
                    <button class="btn btn-outline-success" type="submit">Search</button>
                </form>
                -->

                <LoadIndicator Loaded="AllowedHosts != null">
                    <div class="dropdown me-1">
                        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Allowed Hosts
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" style="width: 500px">
                            @foreach (var host in AllowedHosts)
                            {
                                <li>
                                    <div class="dropdown-item d-flex align-items-center">
                                        <input class="form-control-sm form-control me-1" type="text" value="@host.Hostname" disabled/>
                                        <button type="button" class="btn btn-danger btn-sm" onclick="@(() => DestroyHostAsync(host.Hostname))">
                                            <i class="oi oi-trash"></i>
                                        </button>
                                    </div>
                                </li>
                            }
                            <li>
                                <hr class="dropdown-divider">
                            </li>
                            <li>
                                <div class="dropdown-item d-flex align-items-center">
                                    <button type="button" class="btn btn-sm btn-success" onclick="@(AddHostAsync)">Add new host</button>
                                </div>
                            </li>
                        </ul>
                    </div>
                </LoadIndicator>

                <LoadIndicator Loaded="ApiKeys != null">
                    <div class="dropdown me-1">
                        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            API Keys
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" style="width: 500px">
                            @foreach (var key in ApiKeys)
                            {
                                <li>
                                    <div class="dropdown-item d-flex align-items-center">
                                        <label class="me-1">@key.Title</label>
                                        <input class="form-control-sm form-control me-1" type="text" value="@key.Key" disabled/>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-primary btn-sm" onclick="navigator.clipboard.writeText('@key.Key');">copy</button>
                                            <button type="button" class="btn btn-danger btn-sm" onclick="@(() => DestroyKeyAsync(key.Key))">
                                                <i class="oi oi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </li>
                            }
                            <li>
                                <hr class="dropdown-divider">
                            </li>
                            <li>
                                <div class="dropdown-item d-flex align-items-center">
                                    <button type="button" class="btn btn-sm btn-success" onclick="@(GenerateKey)">Generate new key</button>
                                </div>
                            </li>
                        </ul>
                    </div>
                </LoadIndicator>
                <NavLink class="btn btn-primary" href="logout">Logout</NavLink>
            </div>
        </div>
    </div>
</nav>

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <main>
        <div class="container-fluid py-3">
            @Body
        </div>
    </main>
</div>

<style>
    .dropdown-menu-right {
       right: 0 !important;
       left: auto !important;
    }
</style>

@code{
    private StorageInfo? StorageInfo { get; set; }
    private ICollection<ApiKey>? ApiKeys { get; set; }
    private ICollection<AllowedHost>? AllowedHosts { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        StorageInfo = await Client.StorageInfoAsync();
        ApiKeys = await Client.ApiKeysAllAsync();
        AllowedHosts = await Client.AllowedHostsAllAsync();
    }

    private async Task GenerateKey()
    {
        var title = await JsRuntime.InvokeAsync<string>("prompt", "API-Key name?");
        if (!string.IsNullOrWhiteSpace(title))
        {
            var key = await Client.ApiKeysPOSTAsync(title);
            ApiKeys?.Add(key);
        }
    }

    private async Task DestroyKeyAsync(string key)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Delete key?"))
        {
            try
            {
                await Client.ApiKeysDELETEAsync(key);
                ApiKeys?.Remove(ApiKeys.First(x => x.Key == key));
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                await JsRuntime.InvokeVoidAsync("alert", ex.Message);
            }
        }
    }

    private async Task DestroyHostAsync(string host)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", $"Delete host '{host}'?"))
        {
            try
            {
                await Client.AllowedHostsDELETEAsync(host);
                AllowedHosts?.Remove(AllowedHosts.First(x => x.Hostname == host));
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                await JsRuntime.InvokeVoidAsync("alert", ex.Message);
            }
        }
    }

    private async Task AddHostAsync()
    {
        var host = await JsRuntime.InvokeAsync<string?>("prompt", $"Please provide the host name");
        if (host == null)
        {
            return;
        }

        try
        {
            await Client.AllowedHostsPOSTAsync(host);
            AllowedHosts?.Add(new AllowedHost { Hostname = host });
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }

}