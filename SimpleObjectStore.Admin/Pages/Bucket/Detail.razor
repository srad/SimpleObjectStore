@page "/bucket/{bucketId}"

@using SimpleObjectStore.Services.v1
@using SimpleObjectStore.Admin.Extensions
@using SimpleObjectStore.Admin.ViewModels
@using System.Text
@using Microsoft.Extensions.Options
@using SimpleObjectStore.Admin.Config

@inject NavigationManager Navigation
@inject ILogger<Detail> Logger
@inject SimpleObjectStoreClient Client
@inject IJSRuntime JsRuntime
@inject IOptions<ApiConfig> Config
@inject PersistentComponentState ApplicationState

@attribute [Authorize(Roles = "objectstore")]

@if (Bucket != null)
{
    <div class="d-flex justify-content-between flex-row border-bottom mb-1">
        <div class="flex-column">
            <h3>@Bucket!.Name</h3>
        </div>
        <div class="flex-column">
            <h3>@Bucket.StorageSizeMB MB</h3>
        </div>
    </div>

    <div class="d-flex flex-row align-items-center justify-content-between my-1 justify-content-center">
        <form class="py-2 flex-column">
            <button class="btn btn-primary" type="button" disabled="@IsUploading" onclick="@(async () => await JsRuntime.InvokeVoidAsync("clickElement", "files"))">
                @if (IsUploading)
                {
                    <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                    <span role="status">Uploading... (@UploadStep/@UploadCount)</span>
                }
                else
                {
                    <span role="status">
                        <i class="bi bi-upload mx-1"></i>
                        Upload files
                    </span>
                }
            </button>
            <InputFile id="files" nu hidden class="p-0 m-0" multiple OnChange="UploadFile"/>
            @if (ShowDeleteButton)
            {
                <button type="button" class="btn btn-danger" @onclick="DeleteSelectionAsync">Delete selection</button>
            }
        </form>

        <div>
            <button type="button" class="btn btn-sm btn-danger" @onclick="DeleteBucketAsync">
                <span class="me-1">Delete Bucket</span>
                <i class="bi bi-trash"></i>
            </button>
        </div>
    </div>

    @if (Messages.Length > 0)
    {
        <div class="d-flex flex-row border bg-light w-100 p-3 mb-3">
            <pre class="m-0">@Messages.ToString()</pre>
        </div>
    }

    <div class="border border-dark-subtle">
        <table class="table table-bordered table-hover table-sm m-0">
            <thead class="bg-light align-middle">
            <th style="width: 3%" class="text-center p-2 border">
                <InputCheckbox @bind-Value="AllChecked" @bind-Value:after="@(SelectAll)"/>
            </th>
            <th class="p-2 border">Filename</th>
            <th class="p-2 border">Access Count</th>
            <th class="p-2 border">Size</th>
            <th class="p-2 border">Last Access</th>
            <th class="p-2 border">Created at</th>
            <th class="p-2 border">Private</th>
            <th class="text-center p-2 border" style="width: 5%">Delete</th>
            </thead>
            <tbody>
            @foreach (var file in Bucket.Files)
            {
                <tr class="align-middle @(file.Selected || AllChecked ? "bg-selected" : "")">
                    <td class="text-center">
                        <input type="checkbox" checked="@file.Selected" onclick="@(() => Select(file.StorageFileId))"/>
                    </td>
                    <td class="py-1 align-middle">
                        <a href="@file.FileUrl" target="_blank">@file.FileName</a>
                    </td>
                    <td class="py-1 align-middle px-2">@file.AccessCount</td>
                    <td class="py-1 align-middle px-2">@file.FileSizeMB MB</td>
                    <td class="py-1 align-middle px-2">@file.LastAccess</td>
                    <td class="py-1 align-middle px-2">@file.CreatedAt</td>
                    <td class="py-1 align-middle px-2">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" onchange="@(() => ChangeVisibility(file))" role="switch" checked="@file.Private">
                        </div>
                    </td>
                    <td class="text-center py-1 align-middle">
                        <button class="btn btn-sm btn-outline-danger" type="button" onclick="@(() => DeleteAsync(file.StorageFileId, file.FileName))">Delete</button>
                    </td>
                </tr>
            }
            @if (!Bucket.Files.Any())
            {
                <tr>
                    <td colspan="8">Empty</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

<style>
    .bg-selected {
        background:  #f8d7da;
    }
</style>

@code {
    PersistingComponentStateSubscription persistingSubscription;
    
    private StringBuilder Messages { get; set; } = new();
    private int UploadCount { get; set; }
    private int UploadStep { get; set; }
    private BucketViewModel? Bucket { get; set; }
    private string? Endpoint { get; set; }
    private bool IsUploading { get; set; }
    private bool AllChecked { get; set; }
    private bool ShowDeleteButton => AllChecked || (Bucket != null && Bucket.Files.Any(x => x.Selected));

    private const int MaxFileSize = 1024 * 1024 * 1024;
    private const int MaxFileCount = 1000;

    [Parameter] public string? BucketId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(() =>
        {
            ApplicationState.PersistAsJson(nameof(Endpoint), Endpoint);
            ApplicationState.PersistAsJson(nameof(Bucket), Bucket);
            return Task.CompletedTask;
        });
        
        if (ApplicationState.TryTakeFromJson<string?>(nameof(Endpoint), out var storedEndpoint))
        {
            Endpoint = storedEndpoint;
        }
        else
        {
            Endpoint = Config.Value.Endpoint;
        }
        
        if (ApplicationState.TryTakeFromJson<BucketViewModel?>(nameof(Bucket), out var storedBucket))
        {
            Bucket = storedBucket;
        }
        else
        {
            Bucket = await GetAsync();
        }
    }

    private async Task<BucketViewModel> GetAsync()
    {
        var bucketResponse = await Client.BucketsGetByIdAsync(BucketId);
       
        return new BucketViewModel
        {
            BucketId = bucketResponse.BucketId,
            CreatedAt = bucketResponse.CreatedAt.ToString("dd.MM.yyyy hh:mm"),
            LastAccess = bucketResponse.LastAccess.ToString("dd.MM.yyyy hh:mm"),
            Private = bucketResponse.Private,
            Name = bucketResponse.Name,
            Size = bucketResponse.Size,
            Files = bucketResponse.Files.Select(x => new BucketFileViewModel
            {
                FileUrl = x.FileUrl(Endpoint),
                FileName = x.FileName,
                FileSize = x.FileSize,
                FileSizeMB = x.FileSizeMB,
                StorageFileId = x.StorageFileId,
                AccessCount = x.AccessCount,
                LastAccess = x.LastAccess.ToString("dd.MM.yyyy hh:mm"),
                CreatedAt = x.CreatedAt.ToString("dd.MM.yyyy hh:mm"),
                Selected = false,
                Private = x.Private
            }).ToList()
        };
    }
        

    private async Task DeleteAsync(string fileStorageFileId, string fileName)
    {
        try
        {
            if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Delete file '{fileName}'?"))
            {
                return;
            }

            await Client.StorageDeleteAsync(fileStorageFileId);
            Bucket?.Files.RemoveAt(Bucket.Files.FindIndex(x => x.StorageFileId == fileStorageFileId));
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Messages.AppendLine(ex.Message);
        }
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        try
        {
            Messages.Clear();
            IsUploading = true;
            await InvokeAsync(StateHasChanged);

            var uploadResults = new List<CreateStorageFileResult>();
            UploadCount = e.FileCount;
            UploadStep = 0;

            foreach (var file in e.GetMultipleFiles(MaxFileCount))
            {
                try
                {
                    UploadStep += 1;
                    // Upload one by one. Actually could be uploaded all in one go, but the NSwag
                    // client generator messes up the list type.
                    var fileContent = new StreamContent(file.OpenReadStream(MaxFileSize));
                    var uploads = new List<FileParameter> { new(await fileContent.ReadAsStreamAsync(), file.Name) };

                    var responses = await Client.StoragePostStorageFileAsync(BucketId, uploads);
                    uploadResults.AddRange(responses);

                    foreach (var r in responses)
                    {
                        if (r.Success)
                        {
                            Bucket?.Files.Add(new BucketFileViewModel
                            {
                                FileUrl = r.StorageFile.FileUrl(Endpoint),
                                FileName = r.FileName,
                                FileSizeMB = r.StorageFile.FileSizeMB,
                                StorageFileId = r.StorageFile.StorageFileId,
                                AccessCount = r.StorageFile.AccessCount,
                                LastAccess = r.StorageFile.LastAccess.ToString("dd.MM.yyyy hh:mm"),
                                CreatedAt = r.StorageFile.CreatedAt.ToString("dd.MM.yyyy hh:mm"),
                                Private = false,
                            });
                        }
                    }

                    await InvokeAsync(StateHasChanged);
                }
                catch (Exception ex)
                {
                    Messages.AppendLine($"Error for '{file.Name}': {ex.Message}");
                    Logger.LogError("{FileName} not uploaded (Err: 6): {Message}", file.Name, ex.Message);
                }
            }

            foreach (var result in uploadResults.Where(result => !result.Success))
            {
                Messages.AppendLine($"Error for '{result.FileName}': {result.ErrorMessage}.");
            }
        }
        catch (Exception ex)
        {
            Messages.AppendLine(ex.Message);
        }
        finally
        {
            IsUploading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Bucket = await GetAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async void Select(string fileStorageFileId)
    {
        var element = Bucket.Files.Find(x => x.StorageFileId == fileStorageFileId);
        element.Selected = !element.Selected;
        await InvokeAsync(StateHasChanged);
    }

    private void SelectAll() => Bucket?.Files.ForEach(x => x.Selected = AllChecked);

    private async Task DeleteSelectionAsync()
    {
        var selected = Bucket!.Files.FindAll(x => x.Selected);

        if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Delete selection {selected.Count} selected items?"))
        {
            return;
        }

        var ids = selected.Select(y => y.StorageFileId);

        foreach (var file in selected)
        {
            try
            {
                await Client.StorageDeleteAsync(file.StorageFileId);
            }
            catch (Exception ex)
            {
                Messages.AppendLine(ex.Message);
            }
        }

        Bucket.Files.RemoveAll(x => ids.Contains(x.StorageFileId));
    }

    private async Task ChangeVisibility(BucketFileViewModel view)
    {
        if (view.Private)
        {
            await Client.StoragePublicAsync(view.StorageFileId);
        }
        else
        {
            await Client.StoragePrivateAsync(view.StorageFileId);
        }

        view.Private = !view.Private;
    }

    private async Task DeleteBucketAsync()
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", $"Delete bucket '{Bucket!.Name}'?"))
        {
            await Client.BucketsDeleteAsync(BucketId);
            await InvokeAsync(StateHasChanged);
            Navigation.NavigateTo("/");
        }
    }

    private async Task DownloadAsync(string fileStorageFileId, string fileFileName)
    {
        
    }

}